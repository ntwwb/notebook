* go环境变量配置 (GOROOT和GOPATH)
	GOROOT就是go的安装路径
		在~/.bash_profile中添加下面语句:
			GOROOT=/usr/local/go
			export GOROOT
		当然, 要执行go命令和go工具, 就要配置go的可执行文件的路径:
			操作如下:
				在~/.bash_profile中配置如下:
					export $PATH:$GOROOT/bin
			如果是windows需要使用;符号分割两个路径, mac和类unix都是用:符号分割

	GOPATH:
		go install/go get和 go的工具等会用到GOPATH环境变量.
		GOPATH是作为编译后二进制的存放目的地和import包时的搜索路径 (其实也是你的工作目录, 你可以在src下创建你自己的go源文件, 然后开始工作)。
		GOPATH之下主要包含三个目录: bin、pkg、src
			bin目录主要存放可执行文件; pkg目录存放编译好的库文件, 主要是*.a文件; src目录下主要存放go的源文件
		不要把GOPATH设置成go的安装路径,可以自己在用户目录下面创建一个目录, 如gopath
			操作如下:
				cd ~
				mkdir gopath
				在~/.bash_profile中添加如下语句:
					GOPATH=/Users/username/gopath

		GOPATH可以是一个目录列表, go get下载的第三方库, 一般都会下载到列表的第一个目录里面
		需要把GOPATH中的可执行目录也配置到环境变量中, 否则你自行下载的第三方go工具就无法使用了, 操作如下:
			在~/bash_profile中配置,
			export $PATH:$GOPATH/bin
		创建一个go项目, 并且编译运行:
			mkdir goproject
			cd goproject
			touch hello.go
			在hello.go中输入:

				package main
				import "fmt"
				func main() {
					  fmt.Println("Hello, GO !")
				}
			在项目根目录下执行go build命令来构建你的项目, 构建后会生成hello文件
			运行生成的文件./hello, terminal中输出: Hello, GO !
			当然你也可以直接运行命令go run hello.go来执行程序.

	如果要上述设置生效, 可以执行命令: source ~/.bash_profile, 上述所有操作均为mac系统下的操作, 如果是非mac系统, 请自行变通.
* go依赖管理-govendor
    Golang 官方并没有推荐最佳的包管理方案。到了1.5版本时代，官方引入包管理的设计，加了 vendor 目录来支持本地包管理依赖。官方 wiki 推荐了多种支持这种特性的包管理工具，如：Godep、gv、gvt、glide、govendor等。

    下面简要介绍一个我在项目中用到的 -- govendor。
        该工具将项目依赖的外部包拷贝到项目下的 vendor 目录下，并通过 vendor.json 文件来记录依赖包的版本，方便用户使用相对稳定的依赖。
        对于 govendor 来说，依赖包主要有以下多种类型:

        状态	缩写状态	    含义
        +local	    l	    本地包，即项目自身的包组织
        +external	e	    外部包，即被 $GOPATH 管理，但不在 vendor 目录下
        +vendor	    v	    已被 govendor 管理，即在 vendor 目录下
        +std	    s	    标准库中的包
        +unused	    u	    未使用的包，即包在 vendor 目录下，但项目并没有用到
        +missing	m	    代码引用了依赖包，但该包并没有找到
        +program	p	    主程序包，意味着可以编译为执行文件
        +outside		    外部包和缺失的包
        +all		        所有的包
        (对于 govendor 来说，主要存在三种位置的包：项目自身的包组织为本地（local）包；传统的存放在$GOPATH下的依赖包为外部（external）依赖包；被govendor 管理的放在vendor目录下的依赖包则为vendor包。)
    Installation
        go get -u github.com/kardianos/govendor
        命令行执行 govendor，若出现以下信息，则说明安装成功。

        ➜  ~ govendor
        govendor (v1.0.8): record dependencies and copy into vendor folder
            -govendor-licenses    Show govendor's licenses.
            -version              Show govendor version
        ...
        ...
        Warning： 需要把 $GOPATH/bin/ 加到 PATH 中。
    Quickstart
        # Setup your project.
            cd "my project in GOPATH"
        # 初始化 vendor 目录, project 下出现 vendor 目录
            govendor init

        # Add existing GOPATH files to vendor. 
            govendor add +external

        # View your work.   
            govendor list

        # Look at what is using a package
            govendor list -v fmt

        # Specify a specific version or revision to fetch
            govendor fetch golang.org/x/net/context@a4bbce9fcae005b22ae5443f6af064d80a6f5a55

        # Get latest v1.*.* tag or branch.
            govendor fetch golang.org/x/net/context@v1   

        # Get the tag or branch named "v1".
            govendor fetch golang.org/x/net/context@=v1  

        # Update a package to latest, given any prior version constraint
            govendor fetch golang.org/x/net/context

        # Format your repository only
            govendor fmt +local

        # Build everything in your repository only
            govendor install +local

        # Test your repository only
            govendor test +local
    Sub-commands
        init     初始化 vendor 目录,创建 vendor 文件夹和 vendor.json 文件
        list     列出已经存在的依赖包
        add      从 $GOPATH 中添加依赖包，会加到 vendor.json(添加包到 vendor 目录，如 govendor add +external 添加所有外部包)
        update   从 $GOPATH 升级依赖包(从 $GOPATH 更新依赖包到 vendor 目录)
        remove   从 vendor 文件夹删除依赖
        status   列出本地丢失的、过期的和修改的package
        fetch    从远端库增加新的，或者更新 vendor 文件中的依赖包
        sync     Pull packages into vendor folder from remote repository with revisions  本地存在 vendor.json 时候拉去依赖包，匹配所记录的版本
        migrate  Move packages from a legacy tool to the vendor folder with metadata.
        get     类似 go get，但是会把依赖包拷贝到 vendor 目录
        license  List discovered licenses for the given status or import paths.
        shell    Run a "shell" to make multiple sub-commands more efficient for large projects.

        go tool commands that are wrapped:
              `+<status>` package selection may be used with them
            fmt, build, install, clean, test, vet, generate, tool
    warning
        The project must be within a $GOPATH/src.
        If using go1.5, ensure you set GO15VENDOREXPERIMENT=1.
* 
* 
*






























































































